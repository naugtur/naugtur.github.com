<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Naugtur's scribbles</title>
    <atom:link href="http://naugtur.pl/writes/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://naugtur.pl/writes</link>
    <description></description>
    <pubDate>Wed, 31 Oct 2018 01:00:00 +0100</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Shared CI config with versioning</title>
      <link>http://naugtur.pl/writes/writes/articles/versioning-shared-ci-config/</link>
      <pubDate>Wed, 31 Oct 2018 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/versioning-shared-ci-config/</guid>
      <author></author>
      <description>&lt;p&gt;Gitlab CI is one of a bunch of CIs configurable with a file in the repository. With over 25 repositories sharing a similar configuration maintenance becomes annoying.&lt;/p&gt;
&lt;cut&gt;

&lt;p&gt;My team is building integrations. We can’t seem to stop. There’s over 20 of them now and each has a build pipeline.&lt;/p&gt;
&lt;p&gt;We even managed to get them to be really consistent in terms of tooling, builds and deployment. &lt;code&gt;sed&lt;/code&gt; in a loop was my editor of choice for a while. Now with everything reaching consistency, it’s time to address the overlap.&lt;/p&gt;
&lt;h4 id=&quot;but-how-&quot;&gt;But how?&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;.gitlab-ci.yml&lt;/code&gt; defines the pipeline, so it’s not possible to install something external as the first step of the pipeline to affect the rest. &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; allows importing external files from the repo or a URL. That sounds great. &lt;/p&gt;
&lt;p&gt;External URLs don’t support authorization, so we’d have to put some infrastructure in place to have parts of &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; shared between projects, but not available to general public. You know, security.&lt;/p&gt;
&lt;p&gt;Also, if all configs point to the same URL, it’s just one version shared across all pipelines. Instant updates or no updates.&lt;/p&gt;
&lt;p&gt;The big leap I had to make was to think of &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; as code not configuration. &lt;/p&gt;
&lt;p&gt;If it’s code, I need to reuse it. If I’m reusing code, I put it in a shared library. If I have a library, I version it so I don’t have to spend a few days rolling it out to each project with each change, but can do so progressively when revisiting projects while they continue to work fine with previous version.&lt;/p&gt;
&lt;p&gt;The idea is not new. We’re using internal libraries to reuse code better. Logger, database abstractions etc. - they’re all packages we install in each app and their development follows semantic versioning.&lt;/p&gt;
&lt;h4 id=&quot;here-s-what-i-did&quot;&gt;Here’s what I did&lt;/h4&gt;
&lt;p&gt;Turn it into a library:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extract common steps to files&lt;/li&gt;
&lt;li&gt;give them descriptive stage names&lt;/li&gt;
&lt;li&gt;parametrize with variables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can include a file and use a stage from it, put it in the right order with others etc.
Included stages are configured with variables. Variables from the main yaml are accessible in included code.&lt;/p&gt;
&lt;p&gt;Make it installabe:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set up a repository for the library as a npm compatible package&lt;/li&gt;
&lt;li&gt;use a &lt;code&gt;install&lt;/code&gt; script to take a folder with reusable files and copy it to the folder of the app installing my package as dependency&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I install the library at a certain version, I get a folder with reusable yaml in my repo root. Just need to commit it and it can be included in the main &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We now have full control of the versions. If I want to update the CI pipeline across all apps, I run &lt;code&gt;npm update gitlabci-shared-config&lt;/code&gt; in a loop across repositories and commit changes. If I need to update the version for only one app, or the update requires changes in the app itself - I have control over how and when the update rolls out.&lt;/p&gt;
&lt;p&gt;Also, the generated folder comes with a readme file explaining usage docs matching the installed version and a version file containing the version number so it’s easy to spot if/when it goes out of sync.&lt;/p&gt;
&lt;p&gt;Here’s what it looks like when used&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-yaml&quot;&gt;&lt;span class=&quot;attr&quot;&gt;variables:&lt;/span&gt;
  ...
&lt;span class=&quot;attr&quot;&gt;  CURRENT_NODE_ALPINE:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;node:10-alpine&quot;&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  GCR_CONTAINER_REGISTRY_NAME:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;...&quot;&lt;/span&gt;

&lt;span class=&quot;attr&quot;&gt;include:&lt;/span&gt; 
&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/gitlabci-shared-config/dependencies.yml&quot;&lt;/span&gt;
&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/gitlabci-shared-config/build.yml&quot;&lt;/span&gt;

&lt;span class=&quot;attr&quot;&gt;stages:&lt;/span&gt;
&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; setup_dependencies
&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; build_image_prod
&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; test
  ...

&lt;span class=&quot;attr&quot;&gt;unittesting:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  stage:&lt;/span&gt; test
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;known-issues&quot;&gt;Known issues&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Unused stages cause errors, each stage needs to be in a separate file with only the used ones included to &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;There’s no obvious way to stop someone from editing the installed files - they have to be committed to the repo because there’s no step before &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; includes other than git commit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;We’ve been using this for a few weeks now and It’s proving useful for sharing parts of Gitlab CI configuration across 25 independent apps.  &lt;/p&gt;
&lt;p&gt;I should post some more tips for dealing with maintenance across many applications without the need of a monorepo. Maybe a series of posts? Let me know on twitter.&lt;/p&gt;
&lt;p&gt;More updates on shared CI config coming soon!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Simulation Theory AMA</title>
      <link>http://naugtur.pl/writes/writes/articles/simulation-theory-trolling/</link>
      <pubDate>Wed, 31 Oct 2018 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/simulation-theory-trolling/</guid>
      <author></author>
      <description>&lt;p&gt;Elon Musk comments on quantum physics and computer science. People gather. Finally the audience I’ve been waiting for :D&lt;/p&gt;
&lt;p&gt;I volunteered to share some facts about how the software running our Universe’s simulation works&lt;/p&gt;
&lt;cut&gt;

&lt;p&gt;Warning: silliness ahead. &lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Most popular quantum mechanics quirks can be explained in terms of simulation software optimization or resource constraints to the extent of sounding convincing for someone who only read a popular science article. I wish I were a decent sci-fi author…&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042542692457213954?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Here’s all the explanations I gave in the AMA nobody requested:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Quantum entanglement is one glitch that occurs when the hashing function used for indexing particles has collisions.&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042546445642018817?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The evolutionary algorithm running in our simulation has the goal of not just training an artificial intelligence but in an unattended process discover architectures for trainable AI capable of interfacing with the network adapter on the host machine&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042547340551311362?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The simulation resolves circular references by asynchronously delaying each step with exponential backoff to ensure good approximation of expected results with finite resources.&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042547982548299778?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Speed of light limitation and expanding universe are there to ensure increasing complexity of simulating this area of space are balanced by the diminishing number of objects within what we call observable Universe. It&amp;#39;s an idea superior to fog and map edges in video games&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042549259873263616?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;It&amp;#39;s easier to scale the simulation workload horizontally across astronomical number of cpu cores if each observer can be processed separately even at the cost of some overlap and smart eventual consistency algorithms can converge minor differences unnoticed.&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042550236584050688?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;In the simulation host universe physics it&amp;#39;s way cheaper to use cpu for regenerating the same data multiple times than store it in memory because different value of Planck constant allows for high frequencies but large minimum quants of energy, storing 1 bit takes a lot of power&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042553482312642560?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The waves interfering in this experiment are artifacts of a generic class for handling dimensions. An off-by-one programming error caused it to use one unnecessary dimension in calculations. The error was discovered too late - stayed for backwards compatibility across simulations&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042555544870039552?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;If we continue growing our space observation reach, the speed of universe expanding will have to increase to make up for the onramp of work with removing objects from sight more quickly by pushing them beyond the edge of observable universe&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042556380375343106?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The idea behind entropy is to reduce concentration of unnecessary structures that aren&amp;#39;t used for a longer period of time. It allows freeing up simulation state memory faster and as I said earlier, in host universe memory is expensive.&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042557877175627776?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Superposition of states is an optimization - it&amp;#39;s cheaper to store an equation defining possible particle positions than keep updating the position constantly and propagate it through the network graph of everything affected by it. Graph executes only when attached to an observer&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042559898989600769?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;If it fulfills the goal of the simulation before our neural network design does, it wins as the better architecture to be used in future models&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042560350183481344?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Simulation inspection is evaluated lazily, missing parts are retroactively filled in. Host universe observers monitor the processes running the simulation, they don&amp;#39;t interact with simulated particles on daily basis. Nobody can afford simulating everything unnecessarily.&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042561812200390657?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Due to horizontal scaling across many cores each observer&amp;#39;s scope is computed independently and overlap between observers is converged with eventual consistency. See also my post on off-by-one error in generic dimensions class.&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042562703036956672?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The goal of the evolutionary algorithm building a new neural network architecture is not affected by simulation limitations unless they skew the output of fitness function. Results should generalize to a higher definition universe.&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042563441976913920?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;When an edge in a proximity graph of particles connects to a consciousness the graph cannot be frozen nor garbage collected in the next pass.&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042563870563467266?ref_src=twsrc%5Etfw&quot;&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The evolutionary algorithm running in the simulation is designing a neural network architecture capable of being trained to interface with the API. When we use the API correctly our network architecture design graduates to production use.&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042564605866921984?ref_src=twsrc%5Etfw&quot;&gt;September 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Consciousness interacts with particles so observing oneself in that sense keeps particles actively simulated. Consciousness itself runs in a thread. If one stops observing any particles for long enough, the consciousness thread might be stopped and resources assigned elsewhere.&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042565749993295874?ref_src=twsrc%5Etfw&quot;&gt;September 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;There&amp;#39;s a maximum of specimen in the evolutionary algorithm but the maximum limits all consciousness threads, not only humans.&lt;/p&gt;&amp;mdash; Ζbγѕzеk (@naugtur) &lt;a href=&quot;https://twitter.com/naugtur/status/1042641599744880640?ref_src=twsrc%5Etfw&quot;&gt;September 20, 2018&lt;/a&gt;&lt;/blockquote&gt;




&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>Angielski dla prelegentów w 10 minut</title>
      <link>http://naugtur.pl/writes/writes/articles/dla-prelegentow/</link>
      <pubDate>Tue, 18 Sep 2018 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/dla-prelegentow/</guid>
      <author></author>
      <description>&lt;p&gt;Sam nie jestem &lt;em&gt;native speaker’em&lt;/em&gt; i mam przed sobą jeszcze długą drogę zanim ktoś mnie z takowym pomyli. Ale widziałem nie jednego polskojęzycznego prelegenta mówiącego po angielsku i o ile zwykle mówią bardzo kompetentnie, to dość często powtarza się kilka prostych błędów, które rozpraszają słuchaczy. &lt;/p&gt;
&lt;cut&gt;

&lt;p&gt;Piszę ten tekst od ponad roku, a przypadki zbieram od kilku lat. Zebrałem kilka porad, których stosunek wartości do poświęconego czasu wydaje się najlepszy. Jeśli masz niewiele czasu na podszlifowanie angielskiego, te dwie strony tekstu powinny zauważalnie pomóc.&lt;/p&gt;
&lt;p&gt;Na początek kilka wyrazów, które polskojęzyczni prelegenci często wymawiają nieco dziwnie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Talk&quot;&gt;Talk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Demo&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Data&quot;&gt;Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Code&quot;&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Have&quot;&gt;Have&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Through&quot;&gt;Through&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Which&quot;&gt;Which&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=were&quot;&gt;Were, are&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Header&quot;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Body&quot;&gt;Body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Graphics&quot;&gt;Graphics, physics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Danger&quot;&gt;Danger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Result&quot;&gt;Result&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Effects&quot;&gt;Effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Browser&quot;&gt;Browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://howjsay.com/searchResult?word=Router&quot;&gt;Router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jeśli masz 10 minut na podszlifowanie wymowy, skup się na tych wyrazach. Kliknij w link, kliknij w wyraz i spróbuj powtórzyć.&lt;/p&gt;
&lt;p&gt;Zabawnie robi się gdy zabieramy się za literowanie skrótów. Warto sobie sprawdzić jak dany skrót wymawiają inni. API to trzy osobne dźwięki. Na &lt;em&gt;native speakerach&lt;/em&gt; nieporadne literowanie robi negatywne wrażenie, bo jest to jedna z pierwszych rzeczy, których uczą się w szkole w ramach nauki ortografii. Jeśli powiesz &lt;em&gt;Apiii&lt;/em&gt; zamiast przeliterować - zwykle nic strasznego się nie stanie - postaraj się jednak unikać konsekwentnego wymawiania skrótu niepoprawnie przez całą prezentację.&lt;/p&gt;
&lt;p&gt;Zwróć uwagę na bardziej skomplikowane słowa w swojej prezentacji i sprawdź czy umiesz je wymówić. Niby jasne, ale piszę, żeby nie zapomnieć.&lt;/p&gt;
&lt;p&gt;Inne błędy to już naleciałości z języka polskiego i pozostałości po sposobie nauki charakterystycznym dla naszych szkół i podręczników.
Jest kilka takich słów, które zwykle są zupełnie niepotrzebne a prawdopodobnie ich nadużywasz:
&lt;strong&gt;actually&lt;/strong&gt;, interesting, really, stuff. &lt;/p&gt;
&lt;p&gt;Na początek “actually”. O tym można napisać osobny artykuł (wiem bo czytałem). Polacy potrafią wstawić to słowo do co drugiego zdania, przez co brzmią jakby ciągle się komuś sprzeciwiali. To dlatego, że poprawnie użyte “actually” oznacza “tak naprawdę, to…”. Nigdy nie używaj “actually” mając na myśli “aktualnie”. W ogóle jeśli chcesz powiedzieć “actually” i nie jest to początek wypowiedzi, w której poprawiasz swojego rozmówcę - pomiń to słowo. &lt;/p&gt;
&lt;p&gt;Inne popularne błędy podczas prezentowania:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unikaj dodawania “very” do przymiotników, które i tak są już mocne - “very huge” brzmi podobnie jak “bardzo najlepszy”&lt;/li&gt;
&lt;li&gt;dobrze: “do some work”, źle: “do some job”&lt;/li&gt;
&lt;li&gt;dobrze: “this is what it looks like”, źle “this is how it looks like”&lt;/li&gt;
&lt;li&gt;F-bomb i inne - wychodząc od naszych przekleństw łatwo uznać przekleństwa w języku angielskim za lekkie i zabawne. Mimo to unikaj ich w prezentacji jeśli nie masz 100% pewności, że to co powiesz będzie zabawne dla wszystkich&lt;/li&gt;
&lt;li&gt;“This interesting example” - pozwól publiczności zauważyć, że jest interesujący - nie trzeba im tego zapowiadać.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pamiętaj, że nawet jeśli nie mówisz idealnie, i tak łatwiej Cię zrozumieć niż przeciętnego mieszkańca Wysp Brytyjskich :)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Finding blocking operations with Async Hooks</title>
      <link>http://naugtur.pl/writes/writes/articles/blocked-at/</link>
      <pubDate>Fri, 01 Sep 2017 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/blocked-at/</guid>
      <author></author>
      <description>&lt;p&gt;Node.js introduced Async Hooks in version 8 and I could finally do what I always wanted - make a tool to tell me what is blocking the event loop.&lt;/p&gt;
&lt;cut&gt;

&lt;p&gt;Let’s start with stating the obvious - Node.js programs are asynchronous and it’s for a reason. That reason is called &lt;em&gt;event loop&lt;/em&gt; and if it’s not a familiar word yet, read up on single threaded asynchronous nature of Node.js - it’s great.&lt;/p&gt;
&lt;p&gt;I’ll continue with the assumption that running long synchronous operations in Node.js is something you want to avoid.&lt;/p&gt;
&lt;h2 id=&quot;detecting-blocked-state&quot;&gt;Detecting blocked state&lt;/h2&gt;
&lt;p&gt;In early days of Node, the only way to detect a function blocking the event loop was to notice your server stops accepting new requests for a while. Or use the &lt;a href=&quot;https://www.npmjs.com/package/blocked&quot;&gt;&lt;code&gt;blocked&lt;/code&gt;&lt;/a&gt; package, which uses a neat hack for detecting blockage by (and I’m simplifying) measuring how late a &lt;code&gt;setTimeout&lt;/code&gt; callback is compared to when it should have been called.&lt;/p&gt;
&lt;p&gt;There’s other ways to determine where a lot of CPU cycles are spent. You can use flame grapths but if your code blocks very rarely, the technique might not be helpful unless you know how to reproduce the issue in a narrow window of time.&lt;/p&gt;
&lt;p&gt;Here’s where &lt;a href=&quot;https://nodejs.org/api/async_hooks.html&quot;&gt;Async Hooks&lt;/a&gt; come in.&lt;/p&gt;
&lt;h2 id=&quot;async-hooks-new-possibilities&quot;&gt;Async Hooks - new possibilities&lt;/h2&gt;
&lt;p&gt;Their main purpose is to allow diagnosing asynchronous workflows in general and their first use case was creating an asynchronous stack trace. With &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; hooks I was able to measure the time taken and the &lt;code&gt;init&lt;/code&gt; hook is where a stack trace can be saved. That’s effectively the whole idea behind &lt;a href=&quot;https://www.npmjs.com/package/blocked-at&quot;&gt;&lt;code&gt;blocked-at&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;I made sure it’s similar to the original one, so it’s easy to switch.
Once you run it, you’ll want to analyze the stack traces it collects.&lt;/p&gt;
&lt;h2 id=&quot;finding-the-bug&quot;&gt;Finding the bug&lt;/h2&gt;
&lt;p&gt;Let’s look at an example.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;at Promise.then (&amp;lt;anonymous&amp;gt;)
  at Immediate.start (/.../blocked-at/test/cases/promise.js:8:6)
  at runCallback (timers.js:781:20)
  at tryOnImmediate (timers.js:743:5)
  at processImmediate [as _immediateCallback] (timers.js:714:5)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It’s a stack trace from a test case in the unit tests for &lt;code&gt;blocked-at&lt;/code&gt;. It demonstrates what you’ll get if you’re using promises and a &lt;code&gt;.then&lt;/code&gt; handler is synchronously running a long operation.&lt;/p&gt;
&lt;p&gt;Now compare with the code which produced this stack trace.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;meta&quot;&gt;'use strict'&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; slow = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'../slowfunc'&lt;/span&gt;)

&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)
    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; a++)
    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; [a])
    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
      a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
      slow()
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a
    })
    .catch(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how &lt;code&gt;blocked-at&lt;/code&gt; told us that the offending line is &lt;code&gt;.then(a =&amp;gt; {&lt;/code&gt;. It’s the beginning of the function containing the actual blocking operation somewhere inside &lt;code&gt;slow()&lt;/code&gt; function call.&lt;/p&gt;
&lt;p&gt;To successfully debug your eventloop blocking code you need to start in the reported line and review all synchronous operations going through function execution while ignoring anything that’s in a callback or .then etc.&lt;/p&gt;
&lt;h2 id=&quot;when-stack-trace-is-not-enough&quot;&gt;When stack trace is not enough&lt;/h2&gt;
&lt;p&gt;Sometimes your code is in a callback you pass somewhere to be called synchronously.
Here’s what &lt;code&gt;blocked-at&lt;/code&gt; would report if slow operation happened in a http handler.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;at Server.connectionListener (_http_server.js:307:10)
  at emitOne (events.js:115:13)
  at Server.emit (events.js:210:7)
  at TCP.onconnection (net.js:1560:8)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you see a case like that, all hope is not lost. You have a hint about what kind of asynchronous beginning there was. You can now wrap contents of your handler function in a &lt;code&gt;setImmediate&lt;/code&gt; to get a stack trace from within your codebase.&lt;/p&gt;
&lt;h2 id=&quot;share-your-stack-trace-&quot;&gt;Share your stack trace!&lt;/h2&gt;
&lt;p&gt;I’m hoping to collect more real-life examples of stack traces and build a knowledge base of the less obvious ones.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Share your stack traces from blocked-at in &lt;a href=&quot;https://github.com/naugtur/blocked-at/issues/5&quot;&gt;this github issue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
</description>
    </item>
    <item>
      <title>What if we're overestimating AI again?</title>
      <link>http://naugtur.pl/writes/writes/articles/what-if-were-overestimating-ai-again/</link>
      <pubDate>Mon, 06 Mar 2017 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/what-if-were-overestimating-ai-again/</guid>
      <author></author>
      <description>&lt;blockquote&gt;
&lt;p&gt;I wanted the title to say NLP not AI, but Natural Language Processing is not the first meaning of NLP anymore :/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi. I’m European. If you want to learn something about cultural differences I’ll teach you one thing today. People from Central Europe are not famous for being optimistic.&lt;/p&gt;
&lt;h2 id=&quot;the-hype-s-&quot;&gt;The Hype(s)&lt;/h2&gt;
&lt;p&gt;The first hype around machines and language I know of was when a demo of speech synthesizer was first presented to general public. There’s a great episode of &lt;a href=&quot;http://99percentinvisible.org/episode/vox-ex-machina/&quot;&gt;99% Invisible podcast&lt;/a&gt; detailing that.&lt;/p&gt;
&lt;p&gt;Now guess when was the first time a machine spoke words that were not pre-recorded.&lt;/p&gt;
&lt;p&gt;At the New York World’s Fair in 1939 Bell Labs presented “Voder” - short for “Voice Operating Demonstrator.” It was just few months before the Second World War.&lt;/p&gt;
&lt;p&gt;Everyone was amazed. And while the technology behind it was later used to digitize voice and is still pretty important, people did not get their personal assistant robots to chat with.&lt;/p&gt;
&lt;p&gt;The next great hype around NLP, off the top of my head, was &lt;a href=&quot;https://en.wikipedia.org/wiki/ELIZA&quot;&gt;ELIZA&lt;/a&gt;, a chat bot from 1966. It pretended to be a psychotherapist by scanning each sentence you type and figuring out how to ask another question so that it seems on-topic. Everyone thought passing the Turing test is right around the corner. 50 years later, and chatbots still have trouble getting their act together. Well, maybe ELIZA should have become the therapist for &lt;a href=&quot;http://www.theverge.com/2016/3/24/11297050/tay-microsoft-chatbot-racist&quot;&gt;Microsoft’s Tay&lt;/a&gt;. It could turn out more entertaining than watching &lt;a href=&quot;http://www.ctvnews.ca/sci-tech/we-love-each-other-millions-tune-in-to-watch-two-robots-discuss-life-flirt-1.3231589&quot;&gt;SeeBotsChat&lt;/a&gt; on &lt;a href=&quot;https://www.twitch.tv/seebotschat&quot;&gt;Twitch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sorry for the fast-forward, but from a layman’s perspective the industry has made insignificant progress until just recently.&lt;/p&gt;
&lt;p&gt;Most of the advancement in chatbots between 1966 and 2006 was a result of careful human labor, still echoed by pre-programmed goodies we tend to enjoy most. &lt;a href=&quot;http://www.cheatsheet.com/gear-style/20-questions-to-ask-siri-for-a-hilarious-response.html/?a=viewall&quot;&gt;cheatsheet: questions to ask Siri&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There’s a long way to go from parsing a sentence to understanding it in context.
The only way to do that known to our civilization is being human. Language is key to the definition of being human (or sentient life as we discover language capacity in animals).&lt;/p&gt;
&lt;h2 id=&quot;language-is-a-human-thing&quot;&gt;Language is a human thing&lt;/h2&gt;
&lt;p&gt;My first job was at a company doing machine translation. It was a while before Google Translate came and destroyed the market. We had a demo plugged into the website, where you could translate 250 characters of text between various languages for free. I added monitoring of inputs and outputs so we could use sentences from random people to identify common errors and fix them.&lt;/p&gt;
&lt;p&gt;I remember looking at the logs once and noticing something weird. They didn’t look like random logs, they looked like a conversation. Moments later, I understood what I’m looking at. A guy was chatting with a girl and they didn’t know each other’s languages. He copied each line she posted in Russian and translated it to Polish. Then he wrote a response and translated the other way around. I went home with a nice anecdote. The next day I looked at the logs and they were still there. Forging a relationship.&lt;/p&gt;
&lt;p&gt;Also, good thing our translator knew some medical terms, if you know what I mean. I decided to give them some privacy and turned off the logs.&lt;/p&gt;
&lt;p&gt;The translation was pretty good compared to what Google initially offered. In other words, translation quality ranged from “weird but I can guess what it meant” to “entirely wrong”. That didn’t stop humans who wanted a relationship.&lt;/p&gt;
&lt;p&gt;What I want to say here is - natural language processing technology, even imperfect, will affect people’s lives in ways you don’t expect.&lt;/p&gt;
&lt;h2 id=&quot;and-now&quot;&gt;And now&lt;/h2&gt;
&lt;p&gt;The new hype is here. One can talk to machines and give commands. Provided that they start with the right safeword. Also, if you know someone who has an oldschool answering machine and Alexa in the same room &lt;a href=&quot;http://www.theregister.co.uk/2017/01/07/tv_anchor_says_alexa_buy_me_a_dollhouse_and_she_does/&quot;&gt;buy them something nice&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These machines don’t understand the context and can’t tell if you were meaning or even supposed to talk to them. But that’s ok.&lt;/p&gt;
&lt;p&gt;If you worked at a startup you know what happens when technology meets reality. MVP, scaling, pivots, product/market fit, move fast and break things. In other words - there will be limitations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dear customer, if you want to be understood by our product, please use the following grammar structures and limit your vocabulary to avoid archaic phrases. Also, remember our product does not understand metaphors nor sarcasm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now this is where I get anxious.&lt;/p&gt;
&lt;p&gt;Claims that language is deteriorating have been made &lt;a href=&quot;https://www.princeton.edu/~browning/decline.html&quot;&gt;for centuries&lt;/a&gt; but what if this time degrading language can really happen? It’s not what it used to be with language adapting to new generations. Unless you’re willing to consider machines the new generation of humanity. I’m not ready to do that.&lt;/p&gt;
&lt;p&gt;And remember, English is always the most polished case for NLP. What about all those languages that are harder? What about those languages that wouldn’t pay off? Are we ready to loose the language diversity of the World to get a new fancy hands-free communication device to the market early? Do we even have a say?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Linguistic_relativity&quot;&gt;Linguistic Relativity&lt;/a&gt; no longer claims language determines thinking entirely, but there is modern research into specific areas where language influences thought. Let’s hope we don’t implement 1984 Orwell’s “newspeak” to limit what we &lt;em&gt;can&lt;/em&gt; think.&lt;/p&gt;
&lt;p&gt;Language processing technology is going mainstream and nothing can stop it now.
We have no clue how it’s going to affect our lives. But it will. A lot.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Dear reader. If you’re working on some AI for conversational interfaces, I hope you can share my concerns now.  We are the generation that makes the choice between keeping and loosing the beautiful mess of human languages. You are one of the very few people who have a vote.&lt;/p&gt;
&lt;p&gt;Let’s make it count.&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;AI is coming. Hope for the best, prepare for the worst.
&lt;img src=&quot;https://i.stack.imgur.com/wkUSC.png&quot; alt=&quot;know your paradoxes&quot;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Escaping Backbone ecosystem</title>
      <link>http://naugtur.pl/writes/writes/articles/escaping-backbone-ecosystem/</link>
      <pubDate>Sun, 05 Mar 2017 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/escaping-backbone-ecosystem/</guid>
      <author></author>
      <description>&lt;blockquote&gt;
&lt;p&gt;TL;DR &lt;a href=&quot;https://github.com/naugtur/backbone-redux-migrator&quot;&gt;backbone-redux-migrator&lt;/a&gt; lets you migrate away from Backbone without disrupting the product you’re building&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here’s some old news: &lt;a href=&quot;https://benmccormick.org/2016/03/07/the-sad-state-of-the-backbone-ecosystem/&quot;&gt;Backbone ecosystem is dead&lt;/a&gt;.&lt;/p&gt;
&lt;cut&gt;

&lt;p&gt;Backbone helped organize astounding number of web apps in its time. These products are still alive and well, with people maintaining the codebases and companies hiring new talent.&lt;/p&gt;
&lt;p&gt;But with no more updates to core pieces of ecosystem, paradigm shift in front-end and community interests driven away, keeping a Backbone project productive and hiring new people to work on it becomes a serious challenge.&lt;/p&gt;
&lt;p&gt;Some time in 2015 there was a very promising trend for using mixins to connect React as view layer for Backbone apps. Some time later it seemed like a dead end. I’ve been thinking about that again recently and when a colleague form work asked for help after getting himself in such a dead end, I happened to be in the right state of mind to find a way out.&lt;/p&gt;
&lt;p&gt;I’ve built a tool: &lt;a href=&quot;https://github.com/naugtur/backbone-redux-migrator&quot;&gt;backbone-redux-migrator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It lets a Redux app exist inside of a Backbone project and slowly take over.
It’s optimized for keeping total separation between codebases, so that they only exchange information via the migrator or &lt;code&gt;window.location&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The main idea behind the tool is to let Redux codebase grow without creating dependencies on old code. Backbone architecture requires it to hold on to routing, so even when you use full Redux stack in a rewritten functionality, routing is still done by Backbone side. The great thing that backbone-redux-migrator is helping you achieve is complete functionality migration to Redux with all elements of the stack available. Once Redux app consumes all the functionalities necessary, all you need to do is remove Backbone and configure routing.&lt;/p&gt;
&lt;p&gt;I’ve tested this solution on a real life project my colleague was maintaining and it became easy for him to start rewriting functionalities to Redux without breaking the app. He could decide which functionalities he’s ready to rewrite and which need to stay in Backbone to not affect the release timeline. Also, it prevented him from trying to use events from Backbone in components etc.&lt;/p&gt;
&lt;p&gt;Correct me if I’m wrong, but this seems like the only migration path freeing the project from its Backbone legacy without disruption that isn’t introducing dependencies on Backbone to Redux logic.&lt;/p&gt;
&lt;p&gt;I’m hoping this reaches everyone who’s dealing with maintaining a Backbone project in 2017.&lt;/p&gt;
&lt;p&gt;Feel free to contact me for advice if the readme isn’t enough.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Chaos Monkey for PM2</title>
      <link>http://naugtur.pl/writes/writes/articles/chaos-monkey-for-pm2/</link>
      <pubDate>Thu, 23 Feb 2017 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/chaos-monkey-for-pm2/</guid>
      <author></author>
      <description>&lt;p&gt;The term Chaos Monkey was coined by Netflix - it’s a tool that kills your production machines at random.&lt;/p&gt;
&lt;cut&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/netflix/chaosmonkey&quot;&gt;See their repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Surprised? Well, that’s how they got developers to think about making the services available no matter what happens.
You can’t dismiss any failure as unlikely anymore. There’s a monkey in your server room. Even if it’s entirely virtual.&lt;/p&gt;
&lt;p&gt;I needed this concept recently for testing failover of workers running as processes on &lt;a href=&quot;http://pm2.keymetrics.io/&quot;&gt;PM2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here’s a tiny script I came up with&lt;/p&gt;
&lt;h3 id=&quot;minimum-viable-chaos-monkey&quot;&gt;Minimum Viable Chaos Monkey&lt;/h3&gt;
&lt;p&gt;Just give it the name of your app as &lt;code&gt;$APP&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;#choose one of the delays randomly and wait&lt;/span&gt;
  shuf -n1 &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; 30 60 120 | xargs sleep
  &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;chaos monkey strikes!&quot;&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;#choose one random app process and restart it&lt;/span&gt;
  pm2 id &lt;span class=&quot;variable&quot;&gt;$APP&lt;/span&gt; | egrep -o &lt;span class=&quot;string&quot;&gt;&quot;[0-9]+&quot;&lt;/span&gt; | xargs shuf -n1 &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; | xargs pm2 restart
&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cute, huh?&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Panel dyskusyjny React vs Angular</title>
      <link>http://naugtur.pl/writes/writes/articles/nagranie-react-vs-angular/</link>
      <pubDate>Tue, 06 Sep 2016 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/nagranie-react-vs-angular/</guid>
      <author></author>
      <description>&lt;p&gt;Po miesiącach wytężonej pracy i ciągłego przekładania na później, oddaję w wasze ręce… uszy? słuchawki? nagranie z panelu dyskusyjnego Rect vs Angular, który miałem okazję moderować w lutym tego roku.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Nagranie nie jest idealne, ale odszumiłem je jak tylko mogłem. Odgłosy pisania na klawiaturze musicie wybaczyć Sebastianowi :) - gdyby nie on, nie byłoby nagrania!&lt;/p&gt;
&lt;p&gt;Podziękowania dla panelistów i organizatorów!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;audio-do-pobrania&quot;&gt;Audio do pobrania&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Nagranie podzielone na rozdziały &lt;a href=&quot;https://naugtur.egnyte.com/fl/eSdMCRoEOs/React-vs-Angular&quot;&gt;Otwórz folder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Całe nagranie w jendym pliku &lt;a href=&quot;https://naugtur.egnyte.com/dl/LSFvNmx0B6/React-vs-Angular.mp3&quot;&gt;Pobierz plik&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;linki&quot;&gt;Linki&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/events/160251467665280&quot;&gt;Event z lutego&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://events.pozoga.eu&quot;&gt;Autor nagrania&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://naugtur.pl/news&quot;&gt;Zapisz się do newslettera po więcej&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;licencja&quot;&gt;Licencja&lt;/h2&gt;
&lt;p&gt;Creative Commons Attribution Non-commercial&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://creativecommons.org/licenses/by-nc/3.0/&quot;&gt;https://creativecommons.org/licenses/by-nc/3.0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Czyli jeśli podajesz dalej, to napisz skąd masz i nie zarabiaj na tym.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Everything is an array index</title>
      <link>http://naugtur.pl/writes/writes/articles/everything-is-an-array-index/</link>
      <pubDate>Wed, 13 May 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://naugtur.pl/writes/writes/articles/everything-is-an-array-index/</guid>
      <author></author>
      <description>&lt;p&gt;Javascript engines never cease to amuse me.
Let’s look at our good old &lt;code&gt;Array.prototype.splice&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//returns [1]&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//returns [2]&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 2!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, so splice is accepting non-numbers and it’s casting them to booleans and then to numbers, right? Wrong.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice({},&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Confused? That’s still pretty consistent!
Check this out:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice([],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice([&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//3&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go home javascript, you’re drunk.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;let-s-figure-this-out-anyway-&quot;&gt;Let’s figure this out anyway.&lt;/h3&gt;
&lt;p&gt;First:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice({&lt;span class=&quot;attr&quot;&gt;toString&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;}},&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice({&lt;span class=&quot;attr&quot;&gt;toString&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2one&quot;&lt;/span&gt;;}},&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice({&lt;span class=&quot;attr&quot;&gt;toString&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;;}},&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, that’s something. Looks like it casts stuff to string and expects it to be a number, then if NaN, assumes 0.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a=[];
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(a,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;//returns [ 1 ]&lt;/span&gt;
a.toString=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;}
[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].splice(a,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;//returns [ 3 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Confirmed.
But what about true ?&lt;/p&gt;
&lt;p&gt;Well, it turns out there’s one more step:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;({&lt;span class=&quot;attr&quot;&gt;toString&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;;}}) === &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;({}) &lt;span class=&quot;comment&quot;&gt;//is NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, finally, the closest thing to what &lt;code&gt;Array.prototype.splice&lt;/code&gt; does to its arguments is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;~~&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(arg)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Cast to number&lt;/li&gt;
&lt;li&gt;If input is not a primitive type, &lt;code&gt;Number()&lt;/code&gt; will call &lt;code&gt;.toString()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Force-cast to integer (emulated here by &lt;code&gt;~~&lt;/code&gt;) so all &lt;code&gt;NaN&lt;/code&gt; results become &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now if that’s not a work of art, I don’t know what is. :)&lt;/p&gt;
&lt;p&gt;All return values come from V8 as present in node v0.10.37&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>